{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-bootstrap/carousel/carousel.config.ts","ng://ngx-bootstrap/carousel/carousel.component.ts","ng://ngx-bootstrap/carousel/utils.ts","ng://ngx-bootstrap/carousel/slide.component.ts","ng://ngx-bootstrap/carousel/carousel.module.ts"],"names":["__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","CarouselConfig","this","interval","noPause","noWrap","showIndicators","pauseOnFocus","indicatorsByChunk","itemsPerSlide","singleSlideOffset","Injectable","UNKNOWN","NEXT","PREV","CarouselComponent","config","ngZone","activeSlideChange","EventEmitter","slideRangeChange","startFromIndex","_slides","LinkedList","_currentVisibleSlidesIndex","destroyed","getActive","slide","active","makeSlidesConsistent","slides","forEach","index","item","order","Object","assign","defineProperty","prototype","_currentActiveSlide","multilist","_select","_interval","restartTimer","toArray","isBs3","ngAfterViewInit","_this","setTimeout","_chunkedSlides","array","size","out","Math","ceil","chunk","splice","chunkByNumber","mapSlidesAndIndexes","selectInitialSlides","ngOnDestroy","addSlide","add","undefined","activeSlide","play","removeSlide","remIndex","indexOf","nextSlideIndex_1","isLast","remove","currentSlideIndex_1","getCurrentSlideIndex","emit","nextSlideFromInterval","force","move","Direction","nextSlide","isPlaying","previousSlide","getFirstVisibleIndex","findIndex","getLastVisibleIndex","predicate","l","findLastIndex","direction","firstVisibleIndex","lastVisibleIndex","moveMultilist","findNextSlideIndex","keydownPress","event","keyCode","key","preventDefault","onMouseLeave","onMouseUp","pauseFocusIn","resetTimer","pauseFocusOut","selectSlide","selectSlideRange","pause","isFirst","indicatorsSlides","filter","startIndex","hideSlides","_slidesWithIndexes","slidesToAppend","slice","tslib_1.__spread","selectRangeByNestedIndex","getVisibleIndexes","nextSlideIndex","Error","map","isIndexInRange","isIndexOnTheEdges","endIndex","selectedRange","slidesList","list","find","isVisibleSlideListLast","isVisibleSlideListFirst","moveSliderByOneItem","indexToHide","indexToShow","get","slidesToReorder","displayedIndex","shift","pop","isNaN","currentSlide","currentInterval","runOutsideAngular","setInterval","nInterval","run","clearInterval","Component","args","selector","template","NgZone","Input","Output","SlideComponent","carousel","itemWidth","addClass","ngOnInit","host","[attr.aria-hidden]","HostBinding","type","CarouselModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CarouselConfig {\n  /* Default interval of auto changing of slides */\n  interval = 5000;\n\n  /* Is loop of auto changing of slides can be paused */\n  noPause = false;\n\n  /* Is slides can wrap from the last to the first slide */\n  noWrap = false;\n\n  /* Show carousel-indicators */\n  showIndicators = true;\n\n  /* Slides can be paused on focus */\n  pauseOnFocus = false;\n\n  /* If `true` - carousel indicators indicate slides chunks works ONLY if singleSlideOffset = FALSE */\n  indicatorsByChunk = false;\n\n  /* If value more then 1 â carousel works in multilist mode */\n  itemsPerSlide = 1;\n\n  /* If `true` â carousel shifts by one element. By default carousel shifts by number\n    of visible elements (itemsPerSlide field) */\n  singleSlideOffset = false;\n}\n","// tslint:disable:max-file-line-count\n/***\n * pause (not yet supported) (?string='hover') - event group name which pauses\n * the cycling of the carousel, if hover pauses on mouseenter and resumes on\n * mouseleave keyboard (not yet supported) (?boolean=true) - if false\n * carousel will not react to keyboard events\n * note: swiping not yet supported\n */\n/****\n * Problems:\n * 1) if we set an active slide via model changes, .active class remains on a\n * current slide.\n * 2) if we have only one slide, we shouldn't show prev/next nav buttons\n * 3) if first or last slide is active and noWrap is true, there should be\n * \"disabled\" class on the nav buttons.\n * 4) default interval should be equal 5000\n */\n\nimport {\n  Component, EventEmitter, Input, NgZone, OnDestroy, Output, AfterViewInit\n} from '@angular/core';\n\nimport { isBs3, LinkedList } from 'ngx-bootstrap/utils';\nimport { SlideComponent } from './slide.component';\nimport { CarouselConfig } from './carousel.config';\nimport { findLastIndex, chunkByNumber } from './utils';\nimport { SlideWithIndex, IndexedSlideList } from './models';\n\nexport enum Direction {\n  UNKNOWN,\n  NEXT,\n  PREV\n}\n\n/**\n * Base element to create carousel\n */\n@Component({\n  selector: 'carousel',\n  templateUrl: './carousel.component.html'\n})\nexport class CarouselComponent implements AfterViewInit, OnDestroy {\n  /* If `true` â carousel will not cycle continuously and will have hard stops (prevent looping) */\n  @Input() noWrap: boolean;\n  /*  If `true` â will disable pausing on carousel mouse hover */\n  @Input() noPause: boolean;\n  /*  If `true` â carousel-indicators are visible  */\n  @Input() showIndicators: boolean;\n  /*  If `true` - autoplay will be stopped on focus */\n  @Input() pauseOnFocus: boolean;\n  /* If `true` - carousel indicators indicate slides chunks\n     works ONLY if singleSlideOffset = FALSE */\n  @Input() indicatorsByChunk = false;\n  /* If value more then 1 â carousel works in multilist mode */\n  @Input() itemsPerSlide = 1;\n  /* If `true` â carousel shifts by one element. By default carousel shifts by number\n     of visible elements (itemsPerSlide field) */\n  @Input() singleSlideOffset = false;\n\n  /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\n  @Output()\n  activeSlideChange: EventEmitter<number> = new EventEmitter<number>(false);\n\n  /** Will be emitted when active slides has been changed in multilist mode */\n  @Output()\n  slideRangeChange: EventEmitter<number[]> = new EventEmitter<number[]>();\n\n  /** Index of currently displayed slide(started for 0) */\n  @Input()\n  set activeSlide(index: number) {\n    if (this.multilist) {\n      return;\n    }\n    if (this._slides.length && index !== this._currentActiveSlide) {\n      this._select(index);\n    }\n  }\n\n  get activeSlide(): number {\n    return this._currentActiveSlide;\n  }\n\n  /* Index to start display slides from it */\n  @Input()\n  startFromIndex = 0;\n\n  /**\n   * Delay of item cycling in milliseconds. If false, carousel won't cycle\n   * automatically.\n   */\n  @Input()\n  get interval(): number {\n    return this._interval;\n  }\n\n  set interval(value: number) {\n    this._interval = value;\n    this.restartTimer();\n  }\n\n  get slides(): SlideComponent[] {\n    return this._slides.toArray();\n  }\n\n  // tslint:disable-next-line:no-any\n  protected currentInterval: any;\n  protected _currentActiveSlide: number;\n  protected _interval: number;\n  protected _slides: LinkedList<SlideComponent> = new LinkedList<SlideComponent>();\n  protected _chunkedSlides: SlideWithIndex[][];\n  protected _slidesWithIndexes: SlideWithIndex[];\n  protected _currentVisibleSlidesIndex = 0;\n  protected isPlaying: boolean;\n  protected destroyed = false;\n\n  get isBs4(): boolean {\n    return !isBs3();\n  }\n\n  constructor(config: CarouselConfig, private ngZone: NgZone) {\n    Object.assign(this, config);\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => {\n      if (this.singleSlideOffset) {\n        this.indicatorsByChunk = false;\n      }\n      if (this.multilist) {\n        this._chunkedSlides = chunkByNumber(\n          this.mapSlidesAndIndexes(),\n          this.itemsPerSlide\n        );\n        this.selectInitialSlides();\n      }\n    }, 0);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed = true;\n  }\n\n  /**\n   * Adds new slide. If this slide is first in collection - set it as active\n   * and starts auto changing\n   * @param slide\n   */\n  addSlide(slide: SlideComponent): void {\n    this._slides.add(slide);\n\n    if (this.multilist && this._slides.length <= this.itemsPerSlide) {\n      slide.active = true;\n    }\n\n    if (!this.multilist && this._slides.length === 1) {\n      this._currentActiveSlide = undefined;\n      this.activeSlide = 0;\n      this.play();\n    }\n\n    if (this.multilist && this._slides.length > this.itemsPerSlide) {\n      this.play();\n    }\n  }\n\n  /**\n   * Removes specified slide. If this slide is active - will roll to another\n   * slide\n   * @param slide\n   */\n  removeSlide(slide: SlideComponent): void {\n    const remIndex = this._slides.indexOf(slide);\n\n    if (this._currentActiveSlide === remIndex) {\n      // removing of active slide\n      let nextSlideIndex: number = void 0;\n      if (this._slides.length > 1) {\n        // if this slide last - will roll to first slide, if noWrap flag is\n        // FALSE or to previous, if noWrap is TRUE in case, if this slide in\n        // middle of collection, index of next slide is same to removed\n        nextSlideIndex = !this.isLast(remIndex)\n          ? remIndex\n          : this.noWrap ? remIndex - 1 : 0;\n      }\n      this._slides.remove(remIndex);\n\n      // prevents exception with changing some value after checking\n      setTimeout(() => {\n        this._select(nextSlideIndex);\n      }, 0);\n    } else {\n      this._slides.remove(remIndex);\n      const currentSlideIndex = this.getCurrentSlideIndex();\n      setTimeout(() => {\n        // after removing, need to actualize index of current active slide\n        this._currentActiveSlide = currentSlideIndex;\n        this.activeSlideChange.emit(this._currentActiveSlide);\n      }, 0);\n    }\n  }\n\n  nextSlideFromInterval(force = false): void {\n    this.move(Direction.NEXT, force);\n  }\n\n  /**\n   * Rolling to next slide\n   * @param force: {boolean} if true - will ignore noWrap flag\n   */\n  nextSlide(force = false): void {\n    if (this.isPlaying) {\n      this.restartTimer();\n    }\n    this.move(Direction.NEXT, force);\n  }\n\n  /**\n   * Rolling to previous slide\n   * @param force: {boolean} if true - will ignore noWrap flag\n   */\n  previousSlide(force = false): void {\n    if (this.isPlaying) {\n      this.restartTimer();\n    }\n    this.move(Direction.PREV, force);\n  }\n\n  getFirstVisibleIndex(): number {\n    return this.slides.findIndex(this.getActive);\n  }\n\n  getLastVisibleIndex(): number {\n    return findLastIndex(this.slides, this.getActive);\n  }\n\n  getActive = (slide: SlideComponent) => slide.active;\n\n  move(direction: Direction, force = false): void {\n    const firstVisibleIndex = this.getFirstVisibleIndex();\n    const lastVisibleIndex = this.getLastVisibleIndex();\n\n    if (this.noWrap) {\n      if (\n        direction === Direction.NEXT &&\n        this.isLast(lastVisibleIndex) ||\n        direction === Direction.PREV &&\n        firstVisibleIndex === 0\n      ) {\n        return;\n      }\n    }\n\n    if (!this.multilist) {\n      this.activeSlide = this.findNextSlideIndex(direction, force);\n    } else {\n      this.moveMultilist(direction);\n    }\n  }\n\n  /**\n   * Swith slides by enter, space and arrows keys\n   * @internal\n   */\n  keydownPress(event: KeyboardEvent) {\n    // tslint:disable-next-line:deprecation\n    if (event.keyCode === 13 || event.key === 'Enter' || event.keyCode === 32 || event.key === 'Space') {\n      this.nextSlide();\n      event.preventDefault();\n\n      return;\n    }\n\n    // tslint:disable-next-line:deprecation\n    if (event.keyCode === 37 || event.key === 'LeftArrow') {\n      this.previousSlide();\n\n      return;\n    }\n\n    // tslint:disable-next-line:deprecation\n    if (event.keyCode === 39 || event.key === 'RightArrow') {\n      this.nextSlide();\n\n      return;\n    }\n  }\n\n  /**\n   * Play on mouse leave\n   * @internal\n   */\n  onMouseLeave(): void {\n    if (!this.pauseOnFocus) {\n      this.play();\n    }\n  }\n\n  /**\n   * Play on mouse up\n   * @internal\n   */\n  onMouseUp(): void {\n    if (!this.pauseOnFocus) {\n      this.play();\n    }\n  }\n\n  /**\n   * When slides on focus autoplay is stopped(optional)\n   * @internal\n   */\n  pauseFocusIn(): void {\n    if (this.pauseOnFocus) {\n      this.isPlaying = false;\n      this.resetTimer();\n    }\n  }\n\n  /**\n   * When slides out of focus autoplay is started\n   * @internal\n   */\n  pauseFocusOut(): void {\n    this.play();\n  }\n\n  /**\n   * Rolling to specified slide\n   * @param index: {number} index of slide, which must be shown\n   */\n  selectSlide(index: number): void {\n    if (this.isPlaying) {\n      this.restartTimer();\n    }\n\n    if (!this.multilist) {\n      this.activeSlide = this.indicatorsByChunk ? index * this.itemsPerSlide : index;\n    } else {\n      this.selectSlideRange(this.indicatorsByChunk ? index * this.itemsPerSlide : index);\n    }\n  }\n\n  /**\n   * Starts a auto changing of slides\n   */\n  play(): void {\n    if (!this.isPlaying) {\n      this.isPlaying = true;\n      this.restartTimer();\n    }\n  }\n\n  /**\n   * Stops a auto changing of slides\n   */\n  pause(): void {\n    if (!this.noPause) {\n      this.isPlaying = false;\n      this.resetTimer();\n    }\n  }\n\n  /**\n   * Finds and returns index of currently displayed slide\n   */\n  getCurrentSlideIndex(): number {\n    return this._slides.findIndex(this.getActive);\n  }\n\n  /**\n   * Defines, whether the specified index is last in collection\n   * @param index\n   */\n  isLast(index: number): boolean {\n    return index + 1 >= this._slides.length;\n  }\n\n  /**\n   * Defines, whether the specified index is first in collection\n   * @param index\n   */\n  isFirst(index: number): boolean {\n    return index === 0;\n  }\n\n  indicatorsSlides(): SlideComponent[] {\n    return this.slides.filter(\n      (slide: SlideComponent, index: number) => !this.indicatorsByChunk || index % this.itemsPerSlide === 0\n    );\n  }\n\n  private selectInitialSlides(): void {\n    const startIndex = this.startFromIndex <= this._slides.length\n      ? this.startFromIndex\n      : 0;\n\n    this.hideSlides();\n\n    if (this.singleSlideOffset) {\n      this._slidesWithIndexes = this.mapSlidesAndIndexes();\n\n      if (this._slides.length - startIndex < this.itemsPerSlide) {\n        const slidesToAppend = this._slidesWithIndexes.slice(0, startIndex);\n\n        this._slidesWithIndexes  = [\n          ...this._slidesWithIndexes,\n          ...slidesToAppend\n        ]\n          .slice(slidesToAppend.length)\n          .slice(0, this.itemsPerSlide);\n      } else {\n        this._slidesWithIndexes = this._slidesWithIndexes.slice(\n          startIndex,\n          startIndex + this.itemsPerSlide\n        );\n      }\n\n      this._slidesWithIndexes.forEach((slide: SlideWithIndex) => slide.item.active = true);\n      this.makeSlidesConsistent(this._slidesWithIndexes);\n    } else {\n      this.selectRangeByNestedIndex(startIndex);\n    }\n\n    this.slideRangeChange.emit(this.getVisibleIndexes());\n  }\n\n  /**\n   * Defines next slide index, depending of direction\n   * @param direction: Direction(UNKNOWN|PREV|NEXT)\n   * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\n   *   return undefined if next slide require wrapping\n   */\n  private findNextSlideIndex(direction: Direction, force: boolean): number {\n    let nextSlideIndex = 0;\n\n    if (\n      !force &&\n      (this.isLast(this.activeSlide) &&\n        direction !== Direction.PREV &&\n        this.noWrap)\n    ) {\n      return undefined;\n    }\n\n    switch (direction) {\n      case Direction.NEXT:\n        // if this is last slide, not force, looping is disabled\n        // and need to going forward - select current slide, as a next\n        nextSlideIndex = !this.isLast(this._currentActiveSlide)\n          ? this._currentActiveSlide + 1\n          : !force && this.noWrap ? this._currentActiveSlide : 0;\n        break;\n      case Direction.PREV:\n        // if this is first slide, not force, looping is disabled\n        // and need to going backward - select current slide, as a next\n        nextSlideIndex =\n          this._currentActiveSlide > 0\n            ? this._currentActiveSlide - 1\n            : !force && this.noWrap\n              ? this._currentActiveSlide\n              : this._slides.length - 1;\n        break;\n      default:\n        throw new Error('Unknown direction');\n    }\n\n    return nextSlideIndex;\n  }\n\n  private mapSlidesAndIndexes(): SlideWithIndex[] {\n    return this.slides\n      .slice()\n      .map((slide: SlideComponent, index: number) => {\n        return {\n          index,\n          item: slide\n        };\n      });\n  }\n\n\n  private selectSlideRange(index: number): void {\n    if (this.isIndexInRange(index)) {\n      return;\n    }\n\n    this.hideSlides();\n\n    if (!this.singleSlideOffset) {\n      this.selectRangeByNestedIndex(index);\n    } else {\n      const startIndex = this.isIndexOnTheEdges(index)\n        ? index\n        : index - this.itemsPerSlide + 1;\n\n      const endIndex = this.isIndexOnTheEdges(index)\n        ? index + this.itemsPerSlide\n        : index + 1;\n\n      this._slidesWithIndexes = this.mapSlidesAndIndexes().slice(startIndex, endIndex);\n      this.makeSlidesConsistent(this._slidesWithIndexes);\n\n      this._slidesWithIndexes.forEach((slide: SlideWithIndex) => slide.item.active = true);\n    }\n\n    this.slideRangeChange.emit(this.getVisibleIndexes());\n  }\n\n  private selectRangeByNestedIndex(index: number): void {\n    const selectedRange = this._chunkedSlides\n      .map((slidesList, i: number) => {\n        return {\n          index: i,\n          list: slidesList\n        };\n      })\n      .find(\n        (slidesList: IndexedSlideList) => {\n          return slidesList.list.find(slide => slide.index === index) !== undefined;\n        }\n      );\n\n    this._currentVisibleSlidesIndex = selectedRange.index;\n\n    this._chunkedSlides[selectedRange.index].forEach((slide: SlideWithIndex) => {\n      slide.item.active = true;\n    });\n  }\n\n  private isIndexOnTheEdges(index: number): boolean {\n    return (\n      index + 1 - this.itemsPerSlide <= 0 ||\n      index + this.itemsPerSlide <= this._slides.length\n    );\n  }\n\n  private isIndexInRange(index: number): boolean {\n    if (this.singleSlideOffset) {\n      const visibleIndexes = this._slidesWithIndexes.map((slide: SlideWithIndex) => slide.index);\n\n      return visibleIndexes.indexOf(index) >= 0;\n    }\n\n    return (\n      index <= this.getLastVisibleIndex() &&\n      index >= this.getFirstVisibleIndex()\n    );\n  }\n\n  private hideSlides(): void {\n    this.slides.forEach((slide: SlideComponent) => slide.active = false);\n  }\n\n  private isVisibleSlideListLast(): boolean {\n    return this._currentVisibleSlidesIndex === this._chunkedSlides.length - 1;\n  }\n\n  private isVisibleSlideListFirst(): boolean {\n    return this._currentVisibleSlidesIndex === 0;\n  }\n\n  private moveSliderByOneItem(direction: Direction): void {\n    let firstVisibleIndex: number;\n    let lastVisibleIndex: number;\n    let indexToHide: number;\n    let indexToShow: number;\n\n    if (this.noWrap) {\n      firstVisibleIndex = this.getFirstVisibleIndex();\n      lastVisibleIndex = this.getLastVisibleIndex();\n\n      indexToHide = direction === Direction.NEXT\n        ? firstVisibleIndex\n        : lastVisibleIndex;\n\n      indexToShow = direction !== Direction.NEXT\n        ? firstVisibleIndex - 1\n        : !this.isLast(lastVisibleIndex)\n          ? lastVisibleIndex + 1 : 0;\n\n      this._slides.get(indexToHide).active = false;\n      this._slides.get(indexToShow).active = true;\n\n      const slidesToReorder = this.mapSlidesAndIndexes().filter(\n        (slide: SlideWithIndex) => slide.item.active\n      );\n\n      this.makeSlidesConsistent(slidesToReorder);\n\n      this.slideRangeChange.emit(this.getVisibleIndexes());\n    } else {\n      let displayedIndex: number;\n\n      firstVisibleIndex = this._slidesWithIndexes[0].index;\n      lastVisibleIndex = this._slidesWithIndexes[this._slidesWithIndexes.length - 1].index;\n\n      if (direction === Direction.NEXT) {\n        this._slidesWithIndexes.shift();\n\n        displayedIndex = this.isLast(lastVisibleIndex)\n          ? 0\n          : lastVisibleIndex + 1;\n\n        this._slidesWithIndexes.push({\n          index: displayedIndex,\n          item: this._slides.get(displayedIndex)\n        });\n      } else {\n        this._slidesWithIndexes.pop();\n        displayedIndex = this.isFirst(firstVisibleIndex)\n          ? this._slides.length - 1\n          : firstVisibleIndex - 1;\n\n        this._slidesWithIndexes = [{\n          index: displayedIndex,\n          item: this._slides.get(displayedIndex)\n        }, ...this._slidesWithIndexes];\n      }\n\n      this.hideSlides();\n\n      this._slidesWithIndexes.forEach(slide => slide.item.active = true);\n\n      this.makeSlidesConsistent(this._slidesWithIndexes);\n\n      this.slideRangeChange.emit(\n        this._slidesWithIndexes.map((slide: SlideWithIndex) => slide.index)\n      );\n    }\n  }\n\n  private makeSlidesConsistent = (slides: SlideWithIndex[]): void => {\n    slides.forEach((slide: SlideWithIndex, index: number) => slide.item.order = index);\n  }\n\n  private moveMultilist(direction: Direction): void {\n    if (this.singleSlideOffset) {\n      this.moveSliderByOneItem(direction);\n    } else {\n      this.hideSlides();\n\n      if (this.noWrap) {\n        this._currentVisibleSlidesIndex = direction === Direction.NEXT\n          ? this._currentVisibleSlidesIndex + 1\n          : this._currentVisibleSlidesIndex - 1;\n      } else {\n        if (direction === Direction.NEXT) {\n          this._currentVisibleSlidesIndex = this.isVisibleSlideListLast()\n            ? 0\n            : this._currentVisibleSlidesIndex + 1;\n        } else {\n          this._currentVisibleSlidesIndex = this.isVisibleSlideListFirst()\n            ? this._chunkedSlides.length - 1\n            : this._currentVisibleSlidesIndex - 1;\n        }\n      }\n\n      this._chunkedSlides[this._currentVisibleSlidesIndex].forEach(\n        (slide: SlideWithIndex) => slide.item.active = true\n      );\n\n      this.slideRangeChange.emit(this.getVisibleIndexes());\n    }\n  }\n\n  private getVisibleIndexes(): number[] {\n    if (!this.singleSlideOffset) {\n      return this._chunkedSlides[this._currentVisibleSlidesIndex]\n        .map((slide: SlideWithIndex) => slide.index);\n    } else {\n      return this._slidesWithIndexes.map((slide: SlideWithIndex) => slide.index);\n    }\n  }\n\n  /**\n   * Sets a slide, which specified through index, as active\n   * @param index\n   */\n  private _select(index: number): void {\n    if (isNaN(index)) {\n      this.pause();\n\n      return;\n    }\n\n    if (!this.multilist) {\n      const currentSlide = this._slides.get(this._currentActiveSlide);\n      if (currentSlide) {\n        currentSlide.active = false;\n      }\n    }\n\n    const nextSlide = this._slides.get(index);\n    if (nextSlide) {\n      this._currentActiveSlide = index;\n      nextSlide.active = true;\n      this.activeSlide = index;\n      this.activeSlideChange.emit(index);\n    }\n  }\n\n  /**\n   * Starts loop of auto changing of slides\n   */\n  private restartTimer() {\n    this.resetTimer();\n    const interval = +this.interval;\n    if (!isNaN(interval) && interval > 0) {\n      this.currentInterval = this.ngZone.runOutsideAngular(() => {\n        return setInterval(() => {\n          const nInterval = +this.interval;\n          this.ngZone.run(() => {\n            if (\n              this.isPlaying &&\n              !isNaN(this.interval) &&\n              nInterval > 0 &&\n              this.slides.length\n            ) {\n              this.nextSlideFromInterval();\n            } else {\n              this.pause();\n            }\n          });\n        }, interval);\n      });\n    }\n  }\n\n  get multilist(): boolean {\n    return this.itemsPerSlide > 1;\n  }\n\n  /**\n   * Stops loop of auto changing of slides\n   */\n  private resetTimer(): void {\n    if (this.currentInterval) {\n      clearInterval(this.currentInterval);\n      this.currentInterval = void 0;\n    }\n  }\n}\n","/**\n * Returns the index of the last element in the array where predicate is true, and -1\n * otherwise.\n * @param array The source array to search in\n * @param predicate find calls predicate once for each element of the array, in descending\n * order, until it finds one where predicate returns true. If such an element is found,\n * findLastIndex immediately returns that element index. Otherwise, findLastIndex returns -1.\n */\nexport function findLastIndex<T>(array: T[], predicate: (value: T, index: number, obj: T[]) => boolean): number {\n  let l = array.length;\n\n  while (l--) {\n    if (predicate(array[l], l, array)) {\n      return l;\n    }\n  }\n\n  return -1;\n}\n\nexport function chunkByNumber<T>(array: T[], size: number): T[][] {\n  const out = [];\n  const n = Math.ceil((array.length) / size);\n  let i = 0;\n\n  while (i < n) {\n    const chunk = array.splice(\n      0,\n      (i === n - 1) && size < array.length ? array.length : size\n    );\n\n    out.push(chunk);\n    i++;\n  }\n\n  return out;\n}\n","import {\n  Component,\n  HostBinding,\n  OnDestroy,\n  Input,\n  OnInit\n} from '@angular/core';\n\nimport { CarouselComponent } from './carousel.component';\n\n@Component({\n  selector: 'slide',\n  template: `\n    <div [class.active]=\"active\" class=\"item\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  host: {\n    '[attr.aria-hidden]': '!active'\n  }\n})\nexport class SlideComponent implements OnInit, OnDestroy {\n  /** Is current slide active */\n  @HostBinding('class.active')\n  @Input()\n  active: boolean;\n\n  @HostBinding('style.width') itemWidth = '100%';\n  @HostBinding('style.order') order = 0;\n\n  /** Wraps element by appropriate CSS classes */\n  @HostBinding('class.item')\n  @HostBinding('class.carousel-item')\n  addClass = true;\n\n  /** Link to Parent(container-collection) component */\n  protected carousel: CarouselComponent;\n\n  constructor(carousel: CarouselComponent) {\n    this.carousel = carousel;\n  }\n\n  /** Fires changes in container collection after adding a new slide instance */\n  ngOnInit(): void {\n    this.carousel.addSlide(this);\n    this.itemWidth = `${100 / this.carousel.itemsPerSlide}%`;\n  }\n\n  /** Fires changes in container collection after removing of this slide instance */\n  ngOnDestroy(): void {\n    this.carousel.removeSlide(this);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CarouselComponent } from './carousel.component';\nimport { SlideComponent } from './slide.component';\nimport { CarouselConfig } from './carousel.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SlideComponent, CarouselComponent],\n  exports: [SlideComponent, CarouselComponent],\n  providers: [CarouselConfig]\n})\nexport class CarouselModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: CarouselModule, providers: [] };\n  }\n}\n"]}